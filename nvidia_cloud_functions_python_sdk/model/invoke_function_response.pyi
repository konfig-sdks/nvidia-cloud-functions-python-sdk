# coding: utf-8

"""
    Cloud Functions

    Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.

    The version of the OpenAPI document: 2.87.3
    Created by: https://www.nvidia.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nvidia_cloud_functions_python_sdk import schemas  # noqa: F401


class InvokeFunctionResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Response body with result from a request for executing a job/task as a cloud function using a GPU powered spot/on-demand instance.
    """


    class MetaOapg:
        
        class properties:
            reqId = schemas.UUIDSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ERRORED(cls):
                    return cls("errored")
                
                @schemas.classproperty
                def INPROGRESS(cls):
                    return cls("in-progress")
                
                @schemas.classproperty
                def FULFILLED(cls):
                    return cls("fulfilled")
                
                @schemas.classproperty
                def PENDINGEVALUATION(cls):
                    return cls("pending-evaluation")
                
                @schemas.classproperty
                def REJECTED(cls):
                    return cls("rejected")
            responseReference = schemas.StrSchema
            percentComplete = schemas.Int32Schema
            errorCode = schemas.Int32Schema
            response = schemas.StrSchema
            __annotations__ = {
                "reqId": reqId,
                "status": status,
                "responseReference": responseReference,
                "percentComplete": percentComplete,
                "errorCode": errorCode,
                "response": response,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reqId"]) -> MetaOapg.properties.reqId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responseReference"]) -> MetaOapg.properties.responseReference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percentComplete"]) -> MetaOapg.properties.percentComplete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["response"]) -> MetaOapg.properties.response: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reqId", "status", "responseReference", "percentComplete", "errorCode", "response", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reqId"]) -> typing.Union[MetaOapg.properties.reqId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responseReference"]) -> typing.Union[MetaOapg.properties.responseReference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percentComplete"]) -> typing.Union[MetaOapg.properties.percentComplete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> typing.Union[MetaOapg.properties.errorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["response"]) -> typing.Union[MetaOapg.properties.response, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reqId", "status", "responseReference", "percentComplete", "errorCode", "response", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reqId: typing.Union[MetaOapg.properties.reqId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        responseReference: typing.Union[MetaOapg.properties.responseReference, str, schemas.Unset] = schemas.unset,
        percentComplete: typing.Union[MetaOapg.properties.percentComplete, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        errorCode: typing.Union[MetaOapg.properties.errorCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        response: typing.Union[MetaOapg.properties.response, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvokeFunctionResponse':
        return super().__new__(
            cls,
            *args,
            reqId=reqId,
            status=status,
            responseReference=responseReference,
            percentComplete=percentComplete,
            errorCode=errorCode,
            response=response,
            _configuration=_configuration,
            **kwargs,
        )
