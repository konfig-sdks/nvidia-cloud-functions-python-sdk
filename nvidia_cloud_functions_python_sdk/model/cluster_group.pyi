# coding: utf-8

"""
    Cloud Functions

    Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.

    The version of the OpenAPI document: 2.87.3
    Created by: https://www.nvidia.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from nvidia_cloud_functions_python_sdk import schemas  # noqa: F401


class ClusterGroup(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.UUIDSchema
            name = schemas.StrSchema
            ncaId = schemas.StrSchema
        
            @staticmethod
            def authorizedNcaIds() -> typing.Type['ClusterGroupAuthorizedNcaIds']:
                return ClusterGroupAuthorizedNcaIds
            
            
            class gpus(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Gpu']:
                        return Gpu
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Gpu'], typing.List['Gpu']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gpus':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Gpu':
                    return super().__getitem__(i)
            
            
            class clusters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Cluster']:
                        return Cluster
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Cluster'], typing.List['Cluster']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clusters':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Cluster':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "name": name,
                "ncaId": ncaId,
                "authorizedNcaIds": authorizedNcaIds,
                "gpus": gpus,
                "clusters": clusters,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ncaId"]) -> MetaOapg.properties.ncaId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizedNcaIds"]) -> 'ClusterGroupAuthorizedNcaIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpus"]) -> MetaOapg.properties.gpus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusters"]) -> MetaOapg.properties.clusters: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "ncaId", "authorizedNcaIds", "gpus", "clusters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ncaId"]) -> typing.Union[MetaOapg.properties.ncaId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizedNcaIds"]) -> typing.Union['ClusterGroupAuthorizedNcaIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpus"]) -> typing.Union[MetaOapg.properties.gpus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusters"]) -> typing.Union[MetaOapg.properties.clusters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "ncaId", "authorizedNcaIds", "gpus", "clusters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        ncaId: typing.Union[MetaOapg.properties.ncaId, str, schemas.Unset] = schemas.unset,
        authorizedNcaIds: typing.Union['ClusterGroupAuthorizedNcaIds', schemas.Unset] = schemas.unset,
        gpus: typing.Union[MetaOapg.properties.gpus, list, tuple, schemas.Unset] = schemas.unset,
        clusters: typing.Union[MetaOapg.properties.clusters, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClusterGroup':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            ncaId=ncaId,
            authorizedNcaIds=authorizedNcaIds,
            gpus=gpus,
            clusters=clusters,
            _configuration=_configuration,
            **kwargs,
        )

from nvidia_cloud_functions_python_sdk.model.cluster import Cluster
from nvidia_cloud_functions_python_sdk.model.cluster_group_authorized_nca_ids import ClusterGroupAuthorizedNcaIds
from nvidia_cloud_functions_python_sdk.model.gpu import Gpu
